root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 2
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true
rulers = 120

# Microsoft .NET properties
csharp_new_line_before_members_in_object_initializers = true
csharp_preserve_single_line_blocks = true

# ReSharper properties
resharper_csharp_wrap_arguments_style = chop_if_long
resharper_csharp_wrap_multiple_type_parameter_constraints_style = chop_if_long
resharper_keep_existing_embedded_block_arrangement = false
resharper_keep_existing_switch_expression_arrangement = false
resharper_wrap_array_initializer_style = chop_always
resharper_wrap_list_pattern = chop_always
resharper_wrap_object_and_collection_initializer_style = chop_always
resharper_wrap_property_pattern = chop_always

[*.md]
trim_trailing_whitespace = false

# CSharp code style settings:
[*.{cs,props,targets,csproj,ps1,psm1,proj,http,json,t4,tt,sql}]
indent_size = 4

# Namespace settings
csharp_style_namespace_declarations = file_scoped:warning

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:error
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion

# Prefer "var" everywhere
# csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = false:error
csharp_style_conditional_delegate_call = true:suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true:error
csharp_style_deconstructed_variable_declaration = false:none
csharp_style_pattern_local_over_anonymous_function = true:none

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true
csharp_new_line_before_members_in_object_initializers = true

# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Spacing options
csharp_space_after_cast = true
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = false

# Wrapping options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

dotnet_style_require_accessibility_modifiers = always

# Public API
dotnet_diagnostic.rs0016.severity = warning

# Require braces on all control statements
resharper_braces_for_for = required
resharper_braces_for_foreach = required
resharper_braces_for_ifelse = required
resharper_braces_for_while = required

# ReSharper inspection severities
resharper_arrange_trailing_comma_in_multiline_lists_highlighting = error
resharper_enforce_do_while_statement_braces_highlighting = error
resharper_enforce_fixed_statement_braces_highlighting = error
resharper_enforce_foreach_statement_braces_highlighting = error
resharper_enforce_for_statement_braces_highlighting = error
resharper_enforce_if_statement_braces_highlighting = error
resharper_enforce_lock_statement_braces_highlighting = error
resharper_enforce_using_statement_braces_highlighting = error
resharper_enforce_while_statement_braces_highlighting = error

# ReSharper properties
resharper_align_multiline_binary_expressions_chain = false
resharper_trailing_comma_in_multiline_lists = true
resharper_wrap_before_binary_pattern_op = false
resharper_wrap_chained_binary_expressions = chop_if_long
resharper_wrap_chained_binary_patterns = chop_if_long

# Require braces on all control statements
resharper_csharp_braces_for_ifelse = required
resharper_csharp_braces_for_for = required
resharper_csharp_braces_for_foreach = required
resharper_csharp_braces_for_while = required
resharper_csharp_braces_for_using = required
resharper_csharp_braces_for_lock = required
resharper_csharp_braces_for_fixed = required

[*.cs]
# Disposable member none cleaned up
dotnet_diagnostic.CA1001.severity = error
dotnet_diagnostic.CA1816.severity = error

# Disposable not cleaned up
dotnet_diagnostic.CA2000.severity = error

# Parameter name should match in overriden method
dotnet_diagnostic.CA1725.severity = none

# No null checks (why? if it's not null in the signature already)
dotnet_diagnostic.CA1062.severity = none

# Force member functions to be static if they don't reference anything
dotnet_diagnostic.CA1822.severity = none

# Redundant usings
dotnet_diagnostic.IDE0005.severity = error

# Exceptions should be public
dotnet_diagnostic.CA1064.severity = none
# Exceptions should implement basic constructors
dotnet_diagnostic.CA1032.severity = none

# No underscores in names
dotnet_diagnostic.CA1707.severity = none

# E.g. can't name non-collection XXXCollection
dotnet_diagnostic.CA1711.severity = none

# No array properties (well, duh, you don't have a readonly array type
# in the language, unless you're fine with an interface).
dotnet_diagnostic.CA1819.severity = none

# No List<T> public properties
dotnet_diagnostic.CA1002.severity = none

# ConfigureAwait(false)
# Generally, not necessary anymore
dotnet_diagnostic.CA2007.severity = none

# Don't nest types
dotnet_diagnostic.CA1034.severity = none

# Implicit cast operator should be accompanied with a conversion method.
dotnet_diagnostic.CA2225.severity = none

# Require an attribute property corresponding to the constructor arg
dotnet_diagnostic.CA1019.severity = none

# Avoid unsealed attributes
# dotnet_diagnostic.CA1813.severity = none

# Properties names as types
dotnet_diagnostic.CA1720.severity = none

# Public fields not allowed
dotnet_diagnostic.CA1051.severity = none

# Enums must have a member equal to 0
dotnet_diagnostic.CA1008.severity = none

# Name conflicts with namespace
dotnet_diagnostic.CA1724.severity = none

# Internal class not instantiated -- just produces a bunch of false positives
dotnet_diagnostic.CA1812.severity = none

# Name generic params with T in front (using letters (T, U, W), so no).
dotnet_diagnostic.CA1715.severity = none
